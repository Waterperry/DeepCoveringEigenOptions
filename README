Project Structure
    - The code implementing the DCEO Algorithm is in DceoPolicy.py
    - ContinuousGridworld, TF_Gridworld and FourRooms contains environment code for the continuous evaluation environments
    - CoveringOptionsAgent, CoveringEigenoptionsAgent, DeepCoveringOptionsAgent and EigenOptionsAgent
        contain code for the CO/CEO agents used in the dissertation
    - The entirety of the code used for experimentation on the DCEO variants is in DeepCoveringEigenOptions.py
    - HistoryHashTable contains both raw and translated hash tables used in tracking state visitation
    - PolicyModifiers and EZGreedyPolicy contain code for policy wrappers and ez-greedy baseline
    - tests.ipynb contains some simple tests

To run DCEO:
    - python3 DeepCoveringEigenOptions.py
        Runs all three DCEO variants on the ContinuousGridworld environment
    - other DCEO-specific experiments are defined in functions in the DeepCoveringEigenOptions.py file
        Examples of how to run these are in the if __name__ == '__main__' clause at the bottom of the file

Baselines:
    - other non-DCEO experiments are in the main.py file. this includes ez-greedy.

To generate/visualize eigenfunction representations:
    - generate_ef_representation(abstraction_type=[none,xy], num_episodes=1) in the DCEO file
    - using model generated by the above, visualize_continuous_eigenfunction(model) in the DCEO file